{"ast":null,"code":"var _jsxFileName = \"/Users/lee/Flatiron/code2/ttpchallenge/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Pins from \"./nyc_ttp_pins.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [pins, setPins] = useState(Pins);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n  useEffect(() => {\n    if (!loading) return;\n    loadPins();\n  }, [loading]);\n\n  function handleScroll() {\n    if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight) return;\n    setLoading(true);\n  }\n\n  function loadPins() {\n    setTimeout(() => {\n      setPins(Pins); //fix this to be like loading more pins rather than just the whole list over and over\n\n      setLoading(false);\n    }, 2000);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [pins.map(pin => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: pin.board.name\n    }, pin.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"loading.gif\",\n      alt: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"ldxf0wT5uLH4H0TEmym1EsQ2cds=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/lee/Flatiron/code2/ttpchallenge/src/App.js"],"names":["React","useState","useEffect","Pins","App","pins","setPins","loading","setLoading","window","addEventListener","handleScroll","removeEventListener","loadPins","innerHeight","document","documentElement","scrollTop","offsetHeight","setTimeout","map","pin","board","name","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,IAAP,MAAiB,qBAAjB;;;AAEA,SAASC,GAAT,GAAc;AAAA;;AAEV,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAACE,IAAD,CAAhC;AACA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,YAAlC;AACA,WAAO,MAAMF,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCD,YAArC,CAAb;AACH,GAHQ,EAGN,EAHM,CAAT;AAKAT,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACK,OAAL,EAAc;AACdM,IAAAA,QAAQ;AACX,GAHQ,EAGN,CAACN,OAAD,CAHM,CAAT;;AAKA,WAASI,YAAT,GAAwB;AACpB,QAAIF,MAAM,CAACK,WAAP,GAAqBC,QAAQ,CAACC,eAAT,CAAyBC,SAA9C,KAA4DF,QAAQ,CAACC,eAAT,CAAyBE,YAAzF,EAAuG;AACvGV,IAAAA,UAAU,CAAC,IAAD,CAAV;AACH;;AAED,WAASK,QAAT,GAAoB;AAChBM,IAAAA,UAAU,CAAC,MAAM;AACbb,MAAAA,OAAO,CAACH,IAAD,CAAP,CADa,CAEb;;AACAK,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAJS,EAIP,IAJO,CAAV;AAKH;;AAED,sBACI;AAAA,eACKH,IAAI,CAACe,GAAL,CAASC,GAAG,iBACT;AAAA,gBAAkBA,GAAG,CAACC,KAAJ,CAAUC;AAA5B,OAASF,GAAG,CAACG,EAAb;AAAA;AAAA;AAAA;AAAA,YADH,CADL,eAII;AAAK,MAAA,GAAG,EAAC,aAAT;AAAuB,MAAA,GAAG,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;GApCQpB,G;;KAAAA,G;AAsCT,eAAeA,GAAf","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport Pins from \"./nyc_ttp_pins.json\";\n\nfunction App(){\n\n    const [pins, setPins] = useState(Pins);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        window.addEventListener('scroll', handleScroll);\n        return () => window.removeEventListener('scroll', handleScroll); \n    }, []);\n\n    useEffect(() => {\n        if (!loading) return;\n        loadPins();\n    }, [loading])\n\n    function handleScroll() {\n        if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight) return;\n        setLoading(true);\n    }\n\n    function loadPins() {\n        setTimeout(() => {\n            setPins(Pins);\n            //fix this to be like loading more pins rather than just the whole list over and over\n            setLoading(false);\n        }, 2000);\n    }\n\n    return(\n        <div>\n            {pins.map(pin => (\n                <li key={pin.id}>{pin.board.name}</li>\n            ))}\n            <img src=\"loading.gif\" alt=\"Loading...\" />\n        </div>\n    )\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}